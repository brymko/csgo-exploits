class BitWriter:
    
    def __init__(self):
        self.data = []
        self.w = 0

    def push_to_data(self, u8):
        data_bytes = u8
        if isinstance(u8, str):
            data_bytes = ord(u8)
        assert(isinstance(data_bytes, int) and data_bytes <= 0xff)
        self.data.append(data_bytes)


    def finish(self):
        return bytes(self.data)

    def write_byte(self, byte):
        bits_used = self.w & 7
        if bits_used == 0:
            self.push_to_data(byte)
        else:
            last = self.data[-1]
            free = 8 - bits_used

            # python has no concept of a u8 so limit it to the first 8 bits
            last |= ((byte << bits_used))
            last &= 255
            self.data[-1] = last
            self.push_to_data(byte >> free)

        self.w += 8

    def write_str(self, string):
        for c in string:
            self.write_byte(ord(c))
        self.write_byte(0)

    def write_char(self, char):
        self.write_byte(ord(char))

    def write_bit(self, bit):
        bits_used = self.w & 7
        if bits_used == 0:
            self.push_to_data(bit & 1)
        else:
            last = self.data[-1]
            last |= ((bit & 1) << bits_used)
            last &= 255
            self.data[-1] = last

        self.w += 1


    def write_bits(self, nbits, bits):
        for i in range(nbits):
            self.write_bit(bits >> i)

        

    

    
